{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1_AX2wTRe6RoCX36HvP0UKSb13X3Gr77W","timestamp":1681394062399},{"file_id":"1OilvjXvEtXZP8tv3R8dT5URfEeEjYnb1","timestamp":1679411137630}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# CS3033/CS6405 - Data Mining - Second Assignment\n","\n","### Submission\n","\n","This assignment is **due on 07/04/22 at 23:59**. You should submit a single .ipnyb file with your python code and analysis electronically via Canvas.\n","Please note that this assignment will account for 25 Marks of your module grade.\n","\n","### Declaration\n","\n","By submitting this assignment. I agree to the following:\n","\n","<font color=\"red\">“I have read and understand the UCC academic policy on plagiarism, and agree to the requirements set out thereby in relation to plagiarism and referencing. I confirm that I have referenced and acknowledged properly all sources used in the preparation of this assignment.\n","I declare that this assignment is entirely my own work based on my personal study. I further declare that I have not engaged the services of another to either assist me in, or complete this assignment”</font>\n","\n","### Objective\n","\n","The Boolean satisfiability (SAT) problem consists in determining whether a Boolean formula F is satisfiable or not. F is represented by a pair (X, C), where X is a set of Boolean variables and C is a set of clauses in Conjunctive Normal Form (CNF). Each clause is a disjunction of literals (a variable or its negation). This problem is one of the most widely studied combinatorial problems in computer science. It is the classic NP-complete problem. Over the past number of decades, a significant amount of research work has focused on solving SAT problems with both complete and incomplete solvers.\n","\n","One of the most successful approaches is an algorithm portfolio, where a solver is selected among a set of candidates depending on the problem type. Your task is to create a classifier that takes as input the SAT instance's features and identifies the class.\n","\n","In this project, we represent SAT problems with a vector of 327 features with general information about the problem, e.g., number of variables, number of clauses, the fraction of horn clauses in the problem, etc. There is no need to understand the features to be able to complete the assignment.\n","\n","\n","The original dataset is available at:\n","https://github.com/bprovanbessell/SATfeatPy/blob/main/features_csv/all_features.csv\n","\n"],"metadata":{"id":"8WfrCFmLHxYu"}},{"cell_type":"markdown","source":["## Data Preparation"],"metadata":{"id":"Oav9G1WSJ1nH"}},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv(\"https://raw.githubusercontent.com/andvise/DataAnalyticsDatasets/main/train_dataset.csv\", index_col=0)\n","df.head()\n","df.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"id":"DE0kM0QsJ1En","executionInfo":{"status":"ok","timestamp":1681701497731,"user_tz":-60,"elapsed":564,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"d40021de-9030-41e7-f608-db041ff24d70"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         c   v  clauses_vars_ratio  vars_clauses_ratio  vcg_var_mean  \\\n","2407  1668  56           29.785714            0.033573      0.056130   \n","2408   420  28           15.000000            0.066667      0.107143   \n","2409  1827  59           30.966102            0.032293      0.052898   \n","2410   932  44           21.181818            0.047210      0.064524   \n","2411  1080  45           24.000000            0.041667      0.067284   \n","\n","      vcg_var_coeff  vcg_var_min  vcg_var_max  vcg_var_entropy  \\\n","2407       0.056969     0.046763     0.062350         2.504465   \n","2408       0.046765     0.092857     0.114286         1.798018   \n","2409       0.045194     0.039409     0.055829         2.267027   \n","2410       0.090983     0.049356     0.074034         2.633887   \n","2411       0.055956     0.052778     0.071296         2.141971   \n","\n","      vcg_clause_mean  ...   rwh_0_max    rwh_1_mean  rwh_1_coeff  \\\n","2407         0.056130  ...  19921877.0   6612.008184     1.000000   \n","2408         0.107143  ...   9375075.0  12725.565085     1.000000   \n","2409         0.052898  ...  19531254.0   6245.948689     1.000000   \n","2410         0.064524  ...  12890627.0   7820.073756     1.000000   \n","2411         0.067284  ...  16015628.0   8070.608170     0.952197   \n","\n","          rwh_1_min     rwh_1_max    rwh_2_mean  rwh_2_coeff   rwh_2_min  \\\n","2407  1.120646e-100  13224.016367   6615.279871     1.000000    0.000000   \n","2408   4.271720e-43  25451.130169  12602.458887     1.000000    0.000000   \n","2409  2.996198e-101  12491.897377   6216.493633     1.000000    0.000000   \n","2410   7.261942e-74  15640.147512   7680.635364     1.000000    0.000000   \n","2411   3.858019e+02  15755.414435   8031.133183     0.954395  366.262092   \n","\n","         rwh_2_max   target  \n","2407  13230.559743  5clique  \n","2408  25204.917773  4clique  \n","2409  12432.987265  5clique  \n","2410  15361.270729  5clique  \n","2411  15696.004274  5clique  \n","\n","[5 rows x 328 columns]"],"text/html":["\n","  <div id=\"df-8c69bc81-327d-413c-9f34-2a5a2f0b0233\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>c</th>\n","      <th>v</th>\n","      <th>clauses_vars_ratio</th>\n","      <th>vars_clauses_ratio</th>\n","      <th>vcg_var_mean</th>\n","      <th>vcg_var_coeff</th>\n","      <th>vcg_var_min</th>\n","      <th>vcg_var_max</th>\n","      <th>vcg_var_entropy</th>\n","      <th>vcg_clause_mean</th>\n","      <th>...</th>\n","      <th>rwh_0_max</th>\n","      <th>rwh_1_mean</th>\n","      <th>rwh_1_coeff</th>\n","      <th>rwh_1_min</th>\n","      <th>rwh_1_max</th>\n","      <th>rwh_2_mean</th>\n","      <th>rwh_2_coeff</th>\n","      <th>rwh_2_min</th>\n","      <th>rwh_2_max</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2407</th>\n","      <td>1668</td>\n","      <td>56</td>\n","      <td>29.785714</td>\n","      <td>0.033573</td>\n","      <td>0.056130</td>\n","      <td>0.056969</td>\n","      <td>0.046763</td>\n","      <td>0.062350</td>\n","      <td>2.504465</td>\n","      <td>0.056130</td>\n","      <td>...</td>\n","      <td>19921877.0</td>\n","      <td>6612.008184</td>\n","      <td>1.000000</td>\n","      <td>1.120646e-100</td>\n","      <td>13224.016367</td>\n","      <td>6615.279871</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>13230.559743</td>\n","      <td>5clique</td>\n","    </tr>\n","    <tr>\n","      <th>2408</th>\n","      <td>420</td>\n","      <td>28</td>\n","      <td>15.000000</td>\n","      <td>0.066667</td>\n","      <td>0.107143</td>\n","      <td>0.046765</td>\n","      <td>0.092857</td>\n","      <td>0.114286</td>\n","      <td>1.798018</td>\n","      <td>0.107143</td>\n","      <td>...</td>\n","      <td>9375075.0</td>\n","      <td>12725.565085</td>\n","      <td>1.000000</td>\n","      <td>4.271720e-43</td>\n","      <td>25451.130169</td>\n","      <td>12602.458887</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>25204.917773</td>\n","      <td>4clique</td>\n","    </tr>\n","    <tr>\n","      <th>2409</th>\n","      <td>1827</td>\n","      <td>59</td>\n","      <td>30.966102</td>\n","      <td>0.032293</td>\n","      <td>0.052898</td>\n","      <td>0.045194</td>\n","      <td>0.039409</td>\n","      <td>0.055829</td>\n","      <td>2.267027</td>\n","      <td>0.052898</td>\n","      <td>...</td>\n","      <td>19531254.0</td>\n","      <td>6245.948689</td>\n","      <td>1.000000</td>\n","      <td>2.996198e-101</td>\n","      <td>12491.897377</td>\n","      <td>6216.493633</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>12432.987265</td>\n","      <td>5clique</td>\n","    </tr>\n","    <tr>\n","      <th>2410</th>\n","      <td>932</td>\n","      <td>44</td>\n","      <td>21.181818</td>\n","      <td>0.047210</td>\n","      <td>0.064524</td>\n","      <td>0.090983</td>\n","      <td>0.049356</td>\n","      <td>0.074034</td>\n","      <td>2.633887</td>\n","      <td>0.064524</td>\n","      <td>...</td>\n","      <td>12890627.0</td>\n","      <td>7820.073756</td>\n","      <td>1.000000</td>\n","      <td>7.261942e-74</td>\n","      <td>15640.147512</td>\n","      <td>7680.635364</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>15361.270729</td>\n","      <td>5clique</td>\n","    </tr>\n","    <tr>\n","      <th>2411</th>\n","      <td>1080</td>\n","      <td>45</td>\n","      <td>24.000000</td>\n","      <td>0.041667</td>\n","      <td>0.067284</td>\n","      <td>0.055956</td>\n","      <td>0.052778</td>\n","      <td>0.071296</td>\n","      <td>2.141971</td>\n","      <td>0.067284</td>\n","      <td>...</td>\n","      <td>16015628.0</td>\n","      <td>8070.608170</td>\n","      <td>0.952197</td>\n","      <td>3.858019e+02</td>\n","      <td>15755.414435</td>\n","      <td>8031.133183</td>\n","      <td>0.954395</td>\n","      <td>366.262092</td>\n","      <td>15696.004274</td>\n","      <td>5clique</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 328 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c69bc81-327d-413c-9f34-2a5a2f0b0233')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8c69bc81-327d-413c-9f34-2a5a2f0b0233 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8c69bc81-327d-413c-9f34-2a5a2f0b0233');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["# Label or target variable\n","df['target'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N8MCvTYTKw4Q","executionInfo":{"status":"ok","timestamp":1681701497957,"user_tz":-60,"elapsed":3,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"b7ef8c48-c74f-44cb-ecea-4e25debc186f"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tseitin           298\n","dominating        294\n","cliquecoloring    268\n","php               266\n","subsetcard        263\n","op                201\n","tiling            120\n","5clique           108\n","3color            104\n","matching          102\n","5color             98\n","4color             98\n","3clique            98\n","4clique            94\n","Name: target, dtype: int64"]},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","source":["# Tasks\n","\n","## Basic models and evaluation (5 Marks)\n","\n","Using Scikit-learn, train and evaluate a decision tree classifier using 70% of the dataset from training and 30% for testing. For this part of the project, we are not interested in optimising the parameters; we just want to get an idea of the dataset."],"metadata":{"id":"MTvkBPQvITf-"}},{"cell_type":"code","source":["# YOUR CODE HERE\n","import numpy as np\n","df.dropna(axis=0,how='any')\n","df.dropna(axis=1,how='any')\n","inf_cols = df.isin([np.inf]).any()\n","df = df.loc[:, ~inf_cols]\n","print(df.isna().sum())\n","num_cols = df.select_dtypes(include=[np.number]).columns\n","df[num_cols] = np.clip(df[num_cols], np.finfo(np.float32).min,np.finfo(np.float32).max).astype(np.float32)\n","#first, remove NaN values, then remove infinity values, and finally replace all values that exceed the float32 limit with the float32 boundary value.\n","df"],"metadata":{"id":"Zl0VXO0YH1nG","executionInfo":{"status":"ok","timestamp":1681701498189,"user_tz":-60,"elapsed":234,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"colab":{"base_uri":"https://localhost:8080/","height":696},"outputId":"9b24d3ca-0d50-4629-862f-c02ddcee7011"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["c                     0\n","v                     0\n","clauses_vars_ratio    0\n","vars_clauses_ratio    0\n","vcg_var_mean          0\n","                     ..\n","rwh_2_mean            0\n","rwh_2_coeff           0\n","rwh_2_min             0\n","rwh_2_max             0\n","target                0\n","Length: 328, dtype: int64\n"]},{"output_type":"execute_result","data":{"text/plain":["           c      v  clauses_vars_ratio  vars_clauses_ratio  vcg_var_mean  \\\n","0      608.0   71.0            8.563380            0.116776      0.045172   \n","1      615.0   70.0            8.785714            0.113821      0.049617   \n","2      926.0  105.0            8.819048            0.113391      0.033385   \n","3      603.0   70.0            8.614285            0.116086      0.049799   \n","4      228.0   43.0            5.302326            0.188596      0.067319   \n","...      ...    ...                 ...                 ...           ...   \n","2407  1668.0   56.0           29.785715            0.033573      0.056130   \n","2408   420.0   28.0           15.000000            0.066667      0.107143   \n","2409  1827.0   59.0           30.966103            0.032293      0.052898   \n","2410   932.0   44.0           21.181818            0.047210      0.064524   \n","2411  1080.0   45.0           24.000000            0.041667      0.067284   \n","\n","      vcg_var_coeff  vcg_var_min  vcg_var_max  vcg_var_entropy  \\\n","0          0.173688     0.029605     0.060855         2.802758   \n","1          0.168633     0.032520     0.069919         2.607264   \n","2          0.186444     0.017279     0.047516         3.022879   \n","3          0.133441     0.033167     0.063018         2.688342   \n","4          0.162581     0.048246     0.087719         2.203308   \n","...             ...          ...          ...              ...   \n","2407       0.056969     0.046763     0.062350         2.504465   \n","2408       0.046765     0.092857     0.114286         1.798018   \n","2409       0.045194     0.039409     0.055829         2.267027   \n","2410       0.090983     0.049356     0.074034         2.633888   \n","2411       0.055956     0.052778     0.071296         2.141971   \n","\n","      vcg_clause_mean  ...   rwh_0_max    rwh_1_mean  rwh_1_coeff  \\\n","0            0.045172  ...   5078250.0   1056.695068     1.000000   \n","1            0.049617  ...   5469376.0   1207.488403     1.000000   \n","2            0.033385  ...   4297025.0    441.327057     1.000000   \n","3            0.049799  ...   6640651.0   1181.583374     1.000000   \n","4            0.067319  ...   2437500.0   1091.423950     0.999966   \n","...               ...  ...         ...           ...          ...   \n","2407         0.056130  ...  19921876.0   6612.008301     1.000000   \n","2408         0.107143  ...   9375075.0  12725.565430     1.000000   \n","2409         0.052898  ...  19531254.0   6245.948730     1.000000   \n","2410         0.064524  ...  12890627.0   7820.073730     1.000000   \n","2411         0.067284  ...  16015628.0   8070.608398     0.952197   \n","\n","         rwh_1_min     rwh_1_max    rwh_2_mean  rwh_2_coeff     rwh_2_min  \\\n","0     2.981935e-09   2113.390137   1081.900757     1.000000  1.302080e-29   \n","1     6.927306e-28   2414.976807   1186.623657     1.000000  0.000000e+00   \n","2     0.000000e+00    882.654114    474.697571     1.000000  0.000000e+00   \n","3     2.437278e-30   2363.166748   1149.059082     1.000000  0.000000e+00   \n","4     3.723599e-02   2182.810547   1296.888062     1.000000  6.307424e-06   \n","...            ...           ...           ...          ...           ...   \n","2407  0.000000e+00  13224.016602   6615.279785     1.000000  0.000000e+00   \n","2408  4.273960e-43  25451.130859  12602.458984     1.000000  0.000000e+00   \n","2409  0.000000e+00  12491.897461   6216.493652     1.000000  0.000000e+00   \n","2410  0.000000e+00  15640.147461   7680.635254     1.000000  0.000000e+00   \n","2411  3.858019e+02  15755.414062   8031.133301     0.954395  3.662621e+02   \n","\n","         rwh_2_max    target  \n","0      2163.801514  matching  \n","1      2373.247314  matching  \n","2       949.395142  matching  \n","3      2298.118164  matching  \n","4      2593.776123  matching  \n","...            ...       ...  \n","2407  13230.559570   5clique  \n","2408  25204.917969   4clique  \n","2409  12432.987305   5clique  \n","2410  15361.270508   5clique  \n","2411  15696.003906   5clique  \n","\n","[2412 rows x 328 columns]"],"text/html":["\n","  <div id=\"df-39c8ace4-472a-4012-a51a-b8259f34b84e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>c</th>\n","      <th>v</th>\n","      <th>clauses_vars_ratio</th>\n","      <th>vars_clauses_ratio</th>\n","      <th>vcg_var_mean</th>\n","      <th>vcg_var_coeff</th>\n","      <th>vcg_var_min</th>\n","      <th>vcg_var_max</th>\n","      <th>vcg_var_entropy</th>\n","      <th>vcg_clause_mean</th>\n","      <th>...</th>\n","      <th>rwh_0_max</th>\n","      <th>rwh_1_mean</th>\n","      <th>rwh_1_coeff</th>\n","      <th>rwh_1_min</th>\n","      <th>rwh_1_max</th>\n","      <th>rwh_2_mean</th>\n","      <th>rwh_2_coeff</th>\n","      <th>rwh_2_min</th>\n","      <th>rwh_2_max</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>608.0</td>\n","      <td>71.0</td>\n","      <td>8.563380</td>\n","      <td>0.116776</td>\n","      <td>0.045172</td>\n","      <td>0.173688</td>\n","      <td>0.029605</td>\n","      <td>0.060855</td>\n","      <td>2.802758</td>\n","      <td>0.045172</td>\n","      <td>...</td>\n","      <td>5078250.0</td>\n","      <td>1056.695068</td>\n","      <td>1.000000</td>\n","      <td>2.981935e-09</td>\n","      <td>2113.390137</td>\n","      <td>1081.900757</td>\n","      <td>1.000000</td>\n","      <td>1.302080e-29</td>\n","      <td>2163.801514</td>\n","      <td>matching</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>615.0</td>\n","      <td>70.0</td>\n","      <td>8.785714</td>\n","      <td>0.113821</td>\n","      <td>0.049617</td>\n","      <td>0.168633</td>\n","      <td>0.032520</td>\n","      <td>0.069919</td>\n","      <td>2.607264</td>\n","      <td>0.049617</td>\n","      <td>...</td>\n","      <td>5469376.0</td>\n","      <td>1207.488403</td>\n","      <td>1.000000</td>\n","      <td>6.927306e-28</td>\n","      <td>2414.976807</td>\n","      <td>1186.623657</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>2373.247314</td>\n","      <td>matching</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>926.0</td>\n","      <td>105.0</td>\n","      <td>8.819048</td>\n","      <td>0.113391</td>\n","      <td>0.033385</td>\n","      <td>0.186444</td>\n","      <td>0.017279</td>\n","      <td>0.047516</td>\n","      <td>3.022879</td>\n","      <td>0.033385</td>\n","      <td>...</td>\n","      <td>4297025.0</td>\n","      <td>441.327057</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>882.654114</td>\n","      <td>474.697571</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>949.395142</td>\n","      <td>matching</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>603.0</td>\n","      <td>70.0</td>\n","      <td>8.614285</td>\n","      <td>0.116086</td>\n","      <td>0.049799</td>\n","      <td>0.133441</td>\n","      <td>0.033167</td>\n","      <td>0.063018</td>\n","      <td>2.688342</td>\n","      <td>0.049799</td>\n","      <td>...</td>\n","      <td>6640651.0</td>\n","      <td>1181.583374</td>\n","      <td>1.000000</td>\n","      <td>2.437278e-30</td>\n","      <td>2363.166748</td>\n","      <td>1149.059082</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>2298.118164</td>\n","      <td>matching</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>228.0</td>\n","      <td>43.0</td>\n","      <td>5.302326</td>\n","      <td>0.188596</td>\n","      <td>0.067319</td>\n","      <td>0.162581</td>\n","      <td>0.048246</td>\n","      <td>0.087719</td>\n","      <td>2.203308</td>\n","      <td>0.067319</td>\n","      <td>...</td>\n","      <td>2437500.0</td>\n","      <td>1091.423950</td>\n","      <td>0.999966</td>\n","      <td>3.723599e-02</td>\n","      <td>2182.810547</td>\n","      <td>1296.888062</td>\n","      <td>1.000000</td>\n","      <td>6.307424e-06</td>\n","      <td>2593.776123</td>\n","      <td>matching</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2407</th>\n","      <td>1668.0</td>\n","      <td>56.0</td>\n","      <td>29.785715</td>\n","      <td>0.033573</td>\n","      <td>0.056130</td>\n","      <td>0.056969</td>\n","      <td>0.046763</td>\n","      <td>0.062350</td>\n","      <td>2.504465</td>\n","      <td>0.056130</td>\n","      <td>...</td>\n","      <td>19921876.0</td>\n","      <td>6612.008301</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>13224.016602</td>\n","      <td>6615.279785</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>13230.559570</td>\n","      <td>5clique</td>\n","    </tr>\n","    <tr>\n","      <th>2408</th>\n","      <td>420.0</td>\n","      <td>28.0</td>\n","      <td>15.000000</td>\n","      <td>0.066667</td>\n","      <td>0.107143</td>\n","      <td>0.046765</td>\n","      <td>0.092857</td>\n","      <td>0.114286</td>\n","      <td>1.798018</td>\n","      <td>0.107143</td>\n","      <td>...</td>\n","      <td>9375075.0</td>\n","      <td>12725.565430</td>\n","      <td>1.000000</td>\n","      <td>4.273960e-43</td>\n","      <td>25451.130859</td>\n","      <td>12602.458984</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>25204.917969</td>\n","      <td>4clique</td>\n","    </tr>\n","    <tr>\n","      <th>2409</th>\n","      <td>1827.0</td>\n","      <td>59.0</td>\n","      <td>30.966103</td>\n","      <td>0.032293</td>\n","      <td>0.052898</td>\n","      <td>0.045194</td>\n","      <td>0.039409</td>\n","      <td>0.055829</td>\n","      <td>2.267027</td>\n","      <td>0.052898</td>\n","      <td>...</td>\n","      <td>19531254.0</td>\n","      <td>6245.948730</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>12491.897461</td>\n","      <td>6216.493652</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>12432.987305</td>\n","      <td>5clique</td>\n","    </tr>\n","    <tr>\n","      <th>2410</th>\n","      <td>932.0</td>\n","      <td>44.0</td>\n","      <td>21.181818</td>\n","      <td>0.047210</td>\n","      <td>0.064524</td>\n","      <td>0.090983</td>\n","      <td>0.049356</td>\n","      <td>0.074034</td>\n","      <td>2.633888</td>\n","      <td>0.064524</td>\n","      <td>...</td>\n","      <td>12890627.0</td>\n","      <td>7820.073730</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>15640.147461</td>\n","      <td>7680.635254</td>\n","      <td>1.000000</td>\n","      <td>0.000000e+00</td>\n","      <td>15361.270508</td>\n","      <td>5clique</td>\n","    </tr>\n","    <tr>\n","      <th>2411</th>\n","      <td>1080.0</td>\n","      <td>45.0</td>\n","      <td>24.000000</td>\n","      <td>0.041667</td>\n","      <td>0.067284</td>\n","      <td>0.055956</td>\n","      <td>0.052778</td>\n","      <td>0.071296</td>\n","      <td>2.141971</td>\n","      <td>0.067284</td>\n","      <td>...</td>\n","      <td>16015628.0</td>\n","      <td>8070.608398</td>\n","      <td>0.952197</td>\n","      <td>3.858019e+02</td>\n","      <td>15755.414062</td>\n","      <td>8031.133301</td>\n","      <td>0.954395</td>\n","      <td>3.662621e+02</td>\n","      <td>15696.003906</td>\n","      <td>5clique</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2412 rows × 328 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39c8ace4-472a-4012-a51a-b8259f34b84e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-39c8ace4-472a-4012-a51a-b8259f34b84e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-39c8ace4-472a-4012-a51a-b8259f34b84e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split,KFold\n","from sklearn.preprocessing import MinMaxScaler,StandardScaler\n","\n","x=df.iloc[:,:-1].fillna(0)\n","y=df[\"target\"]\n","x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=11)"],"metadata":{"id":"lvsbQTUrYcdL","executionInfo":{"status":"ok","timestamp":1681701498190,"user_tz":-60,"elapsed":4,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["from sklearn import tree\n","clf=tree.DecisionTreeClassifier()\n","clf=clf.fit(x_train,y_train)"],"metadata":{"id":"a4xLO3zPqmVp","executionInfo":{"status":"ok","timestamp":1681701498509,"user_tz":-60,"elapsed":322,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["score=clf.score(x_test,y_test)\n","print(score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ApYseeGDh5YW","executionInfo":{"status":"ok","timestamp":1681701498510,"user_tz":-60,"elapsed":6,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"7a57f590-0a00-4afc-83a0-cdfea6833704"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9861878453038674\n"]}]},{"cell_type":"markdown","source":["## Robust evaluation (10 Marks)\n","\n","In this section, we are interested in more rigorous techniques by implementing more sophisticated methods, for instance:\n","* Hold-out and cross-validation.\n","* Hyper-parameter tuning.\n","* Feature reduction.\n","* Feature selection.\n","* Feature normalisation.\n","\n","Your report should provide concrete information about your reasoning; everything should be well-explained.\n","\n","The key to geting good marks is to show that you evaluated different methods and that you correctly selected the configuration."],"metadata":{"id":"zADpr0f8IcGL"}},{"cell_type":"markdown","source":["####Feature selection: Remove all columns with identical numerical values."],"metadata":{"id":"r-evKT7ME7tt"}},{"cell_type":"code","source":["from sklearn.feature_selection import VarianceThreshold\n","vt = VarianceThreshold(0)#remove all the column that has a variance of 0\n","x = vt.fit_transform(x)\n","x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v9IIDXHkc2gH","executionInfo":{"status":"ok","timestamp":1681701498510,"user_tz":-60,"elapsed":5,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"3916e8e3-da7a-4872-bb05-8880299ec1ad"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2412, 257)"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)"],"metadata":{"id":"2H_xjz4Ddk82","executionInfo":{"status":"ok","timestamp":1681701498510,"user_tz":-60,"elapsed":3,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}}},"execution_count":46,"outputs":[]},{"cell_type":"markdown","source":["####As I didn't know the optimal values for the hyperparameters, I used the method of random search to find the best set of hyperparameters.\n","####In terms of dimensionality reduction, I wanted to combine feature selection and feature extraction, so I used FeatureUnion, which includes both select k-best and PCA methods."],"metadata":{"id":"RZQvHHyUHUpM"}},{"cell_type":"code","source":["from sklearn.pipeline import Pipeline, FeatureUnion\n","from sklearn.model_selection import RandomizedSearchCV, train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.decomposition import PCA\n","from sklearn.feature_selection import SelectKBest, f_classif, VarianceThreshold\n","from sklearn.preprocessing import StandardScaler\n","# define Pipeline\n","pipeline = Pipeline([\n","    ('scaler', StandardScaler()),#feature normalization\n","    ('reduce_dim', FeatureUnion([\n","        ('pca', PCA()),\n","        ('kbest', SelectKBest(f_classif))\n","    ])),\n","    ('clf', DecisionTreeClassifier())\n","])\n","\n","# define the param space\n","param_dist = {\n","    'reduce_dim__pca__n_components': [2, 4, 6, 8, 10],\n","    'reduce_dim__kbest__k': [2, 4, 6, 8, 10],\n","    'clf__criterion': ['gini', 'entropy'],\n","    'clf__max_depth': [3, 5, 7, 9, 11],\n","    'clf__min_samples_split': [2, 4, 6, 8, 10],\n","    'clf__min_samples_leaf': [1, 2, 3, 4, 5],\n","    'clf__class_weight': [None, 'balanced']\n","}\n","\n","#using the random search\n","random_search = RandomizedSearchCV(\n","    pipeline, param_distributions=param_dist, cv=5, n_iter=50, n_jobs=-1, random_state=1\n",")#including 5 times cv\n","\n","# fit the model\n","random_search.fit(x_train, y_train)\n","\n","# print best parameters\n","print(\"Best parameters: \", random_search.best_params_)\n","\n","# evaluate the model on test model\n","print(\"Test set accuracy: {:.6f}\".format(random_search.score(x_test, y_test)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fvstPHRMc1Q7","executionInfo":{"status":"ok","timestamp":1681701505612,"user_tz":-60,"elapsed":7105,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"00413e17-b503-4d43-bf05-87a21348f8a4"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Best parameters:  {'reduce_dim__pca__n_components': 10, 'reduce_dim__kbest__k': 6, 'clf__min_samples_split': 10, 'clf__min_samples_leaf': 3, 'clf__max_depth': 7, 'clf__criterion': 'entropy', 'clf__class_weight': 'balanced'}\n","Test set accuracy: 0.966851\n"]}]},{"cell_type":"code","source":["#the best parameter set is: (The execution result of the previous cell.)\n","#Best parameters:  {'reduce_dim__pca__n_components': 10, 'reduce_dim__kbest__k': 4, 'clf__min_samples_split': 4, 'clf__min_samples_leaf': 1, 'clf__max_depth': 9, 'clf__criterion': 'entropy', 'clf__class_weight': 'balanced'}"],"metadata":{"id":"1E5bPEc0eXRY","executionInfo":{"status":"ok","timestamp":1681701505612,"user_tz":-60,"elapsed":10,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}}},"execution_count":48,"outputs":[]},{"cell_type":"markdown","source":["## New classifier (10 Marks)\n","\n","Replicate the previous task for a classifier different than K-NN and decision trees. Briefly describe your choice.\n","Try to create the best model for the given dataset.\n","\n","\n","Save your best model into your github. And create a single code cell that loads it and evaluate it on the following test dataset:\n","https://github.com/andvise/DataAnalyticsDatasets/blob/main/test_dataset.csv\n","\n","This link currently contains a sample of the training set. The real test set will be released after the submission. I should be able to run the code cell independently, load all the libraries you need as well."],"metadata":{"id":"FYoMg0EZIrNd"}},{"cell_type":"markdown","source":["####When dealing with high-dimensional datasets, a single decision tree is prone to overfitting, while random forests can reduce the risk of overfitting and improve the generalization performance of the model by randomly selecting features and combining the results of multiple decision trees. Therefore, in such cases, using a random forest model is better than a single decision tree model.\n","That's why I decided to use a random forest model."],"metadata":{"id":"s9mUkj6aKPV_"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# define Pipeline\n","pipeline = Pipeline([\n","    ('scaler', StandardScaler()),#feature normalization\n","    ('reduce_dim', FeatureUnion([\n","        ('pca', PCA()),\n","        ('kbest', SelectKBest(f_classif))\n","    ])),\n","    ('clf', RandomForestClassifier())\n","])\n","\n","# define the param space\n","param_dist = {\n","    'reduce_dim__pca__n_components': [2, 4, 6, 8, 10],\n","    'reduce_dim__kbest__k': [2, 4, 6, 8, 10],\n","    'clf__n_estimators': [5, 10, 20, 50],\n","    'clf__criterion': ['gini', 'entropy'],\n","    'clf__max_depth': [3, 5, 7, 9, 11],\n","    'clf__min_samples_split': [2, 4, 6, 8, 10],\n","    'clf__min_samples_leaf': [1, 2, 3, 4, 5],\n","    'clf__class_weight': [None, 'balanced']\n","}\n","\n","#using the random search\n","random_search = RandomizedSearchCV(\n","    pipeline, param_distributions=param_dist, cv=5, n_iter=50, n_jobs=-1, random_state=1\n",")#including 5 times cv\n","\n","# fit the model\n","random_search.fit(x_train, y_train)\n","\n","# print best parameters\n","print(\"Best parameters: \", random_search.best_params_)\n","\n","# evaluate the model on test model\n","print(\"Test set accuracy: {:.6f}\".format(random_search.score(x_test, y_test)))"],"metadata":{"id":"QRJXrY2hI32F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681701519820,"user_tz":-60,"elapsed":14217,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"87db7edd-8454-4266-cbe6-e4847aa73e5e"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Best parameters:  {'reduce_dim__pca__n_components': 10, 'reduce_dim__kbest__k': 10, 'clf__n_estimators': 50, 'clf__min_samples_split': 6, 'clf__min_samples_leaf': 3, 'clf__max_depth': 9, 'clf__criterion': 'gini', 'clf__class_weight': 'balanced'}\n","Test set accuracy: 0.984807\n"]}]},{"cell_type":"code","source":["from joblib import dump, load\n","dump(clf, 'bestmodel.joblib')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xBun-HmhN9sa","executionInfo":{"status":"ok","timestamp":1681701773867,"user_tz":-60,"elapsed":224,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"b5e0866f-2459-4b88-ad4b-3f1c11d73f10"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['bestmodel.joblib']"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["# <font color=\"blue\">FOR GRADING ONLY</font>\n","\n","Save your best model into your github. And create a single code cell that loads it and evaluate it on the following test dataset: \n","https://github.com/andvise/DataAnalyticsDatasets/blob/main/test_dataset.csv\n"],"metadata":{"id":"Q01BjiiCJTR4"}},{"cell_type":"code","source":["from joblib import dump, load\n","from io import BytesIO\n","import pandas as pd\n","import numpy as np\n","import requests\n","\n","# INSERT YOUR MODEL'S URL\n","mLink = 'https://github.com/Alonsdfn/dm_temp/blob/main/bestmodel.joblib?raw=true'\n","mfile = BytesIO(requests.get(mLink).content)\n","model = load(mfile)\n","\n","# Load the dataset and replicate your preprocessing\n","df = pd.read_csv(\"https://github.com/andvise/DataAnalyticsDatasets/blob/main/test_dataset.csv?raw=true\", index_col=0)\n","df = df.replace([np.inf, -np.inf], 0)\n","df = df.fillna(0)\n","X = df.iloc[:,:-1]\n","y = df['target']\n","\n","# Evaluate your model or pipeline\n","model.score(X,y)"],"metadata":{"id":"w-k6H-1ZKTYo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1681702146640,"user_tz":-60,"elapsed":4059,"user":{"displayName":"Yufei Wu","userId":"00901361423139827257"}},"outputId":"58ba27c2-1d9d-413d-b726-2a31887475fb"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9968102073365231"]},"metadata":{},"execution_count":1}]}]}